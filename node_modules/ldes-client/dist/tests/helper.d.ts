/// <reference types="node" />
import { Quad } from "@rdfjs/types";
import { Member } from "../lib/page.js";
import { ReadableStream } from "stream/web";
export type FragmentId = number;
export declare function read(stream: ReadableStream<Member>): Promise<Member[]>;
export declare class Fragment<T> {
    private members;
    private relations;
    private failCount;
    delay?: number;
    constructor(delay?: number);
    toQuads(ldesId: string, memberToQuads: (id: string, member: T) => Quad[]): Quad[];
    setFailcount(count: number): typeof this;
    addMember(id: string, member: T): typeof this;
    relation(target: FragmentId, type: string, path?: string, value?: string): void;
}
export declare class Tree<T> {
    private fragments;
    private memberToQuads;
    private timestampPath?;
    fetched: string[];
    constructor(memberToQuads: (id: string, member: T) => Quad[], timestampPath?: string);
    base(): string;
    root(): FragmentId;
    newFragment(delay?: number): FragmentId;
    fragment(id: number): Fragment<T>;
    mock(): typeof fetch;
}

export declare const RDFS: import("@treecg/types").Namespace<"subClassOf"[], import("@rdfjs/types").NamedNode<string>, string>;
export declare const SHACL: import("@treecg/types").Namespace<("Shape" | "NodeShape" | "PropertyShape" | "targetNode" | "targetClass" | "targetSubjectsOf" | "targetObjectsOf" | "property" | "path" | "class" | "name" | "description" | "defaultValue" | "alternativePath" | "zeroOrMorePath" | "oneOrMorePath" | "zeroOrOnePath" | "inversePath" | "minCount" | "maxCount" | "datatype")[], import("@rdfjs/types").NamedNode<string>, string>;
export declare const RDFL: {
    namespace: string;
    custom: (input: string) => string;
} & {
    CBD: string;
    PathLens: string;
    Context: string;
    TypedExtract: string;
    EnvVariable: string;
    envKey: string;
    envDefault: string;
} & {
    terms: import("@treecg/types").Namespace<("CBD" | "PathLens" | "Context" | "TypedExtract" | "EnvVariable" | "envKey" | "envDefault")[], import("@rdfjs/types").NamedNode<string>, string>;
};
//# sourceMappingURL=ontology.d.ts.map
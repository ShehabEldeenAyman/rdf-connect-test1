"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroOrOnePath = exports.ZeroOrMorePath = exports.OneOrMorePath = exports.MultiPath = exports.InversePath = exports.AlternativePath = exports.SequencePath = exports.PredicatePath = void 0;
var PredicatePath = /** @class */ (function () {
    function PredicatePath(predicate) {
        this.predicate = predicate;
    }
    PredicatePath.prototype.toString = function () {
        return "<".concat(this.predicate.value, ">");
    };
    PredicatePath.prototype.found = function (cbd, inverse) {
        if (inverse === void 0) { inverse = false; }
        return cbd.enter(this.predicate, inverse);
    };
    PredicatePath.prototype.match = function (store, extracted, focusNode, graphsToIgnore, inverse) {
        if (inverse === void 0) { inverse = false; }
        var quads = (inverse
            ? store.getQuads(null, this.predicate, focusNode, null)
            : store.getQuads(focusNode, this.predicate, null, null)).filter(function (q) { return !graphsToIgnore.includes(q.graph.value); });
        if (quads.length > 0) {
            var cbd_1 = extracted.push(this.predicate, inverse);
            return quads.map(function (quad) {
                var newFocusNode = inverse ? quad.subject : quad.object;
                return { path: [quad], target: newFocusNode, cbdExtracted: cbd_1 };
            });
        }
        else {
            return [];
        }
    };
    return PredicatePath;
}());
exports.PredicatePath = PredicatePath;
var SequencePath = /** @class */ (function () {
    function SequencePath(sequence) {
        this.sequence = sequence;
    }
    SequencePath.prototype.found = function (cbd, inverse) {
        var e_1, _a;
        var current = cbd;
        try {
            for (var _b = __values(this.sequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var seq = _c.value;
                if (current) {
                    current = seq.found(current, inverse);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return current;
    };
    SequencePath.prototype.toString = function () {
        return this.sequence.map(function (x) { return x.toString(); }).join("/");
    };
    SequencePath.prototype.match = function (store, extracted, focusNode, graphsToIgnore, inverse) {
        var e_2, _a;
        if (inverse === void 0) { inverse = false; }
        var results = [
            {
                path: [],
                target: focusNode,
                cbdExtracted: extracted,
            },
        ];
        var _loop_1 = function (path) {
            results = results.flatMap(function (res) {
                var nexts = path.match(store, res.cbdExtracted, res.target, graphsToIgnore, inverse);
                return nexts.map(function (n) { return ({
                    path: __spreadArray(__spreadArray([], __read(res.path), false), __read(n.path), false),
                    cbdExtracted: n.cbdExtracted,
                    target: n.target,
                }); });
            });
        };
        try {
            for (var _b = __values(this.sequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var path = _c.value;
                _loop_1(path);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return results;
    };
    return SequencePath;
}());
exports.SequencePath = SequencePath;
var AlternativePath = /** @class */ (function () {
    function AlternativePath(alternatives) {
        this.alternatives = alternatives;
    }
    AlternativePath.prototype.found = function (cbd, inverse) {
        var e_3, _a;
        try {
            for (var _b = __values(this.alternatives), _c = _b.next(); !_c.done; _c = _b.next()) {
                var option = _c.value;
                var maybe = option.found(cbd, inverse);
                if (maybe)
                    return maybe;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return;
    };
    AlternativePath.prototype.toString = function () {
        return this.alternatives.map(function (x) { return x.toString(); }).join("|");
    };
    AlternativePath.prototype.match = function (store, extracted, focusNode, graphsToIgnore, inverse) {
        if (inverse === void 0) { inverse = false; }
        return this.alternatives.flatMap(function (path) {
            return path.match(store, extracted, focusNode, graphsToIgnore, inverse);
        });
    };
    return AlternativePath;
}());
exports.AlternativePath = AlternativePath;
var InversePath = /** @class */ (function () {
    function InversePath(path) {
        this.path = path;
    }
    InversePath.prototype.found = function (cbd, inverse) {
        return this.path.found(cbd, !inverse);
    };
    InversePath.prototype.toString = function () {
        return "^" + this.path.toString();
    };
    InversePath.prototype.match = function (store, extracted, focusNode, graphsToIgnore, inverse) {
        if (inverse === void 0) { inverse = false; }
        return this.path.match(store, extracted, focusNode, graphsToIgnore, !inverse);
    };
    return InversePath;
}());
exports.InversePath = InversePath;
var MultiPath = /** @class */ (function () {
    function MultiPath(path, maxCount) {
        this.path = path;
        this.maxCount = maxCount;
    }
    MultiPath.prototype.match = function (store, extracted, focusNode, graphsToIgnore, inverse) {
        var e_4, _a, e_5, _b;
        if (inverse === void 0) { inverse = false; }
        var out = [];
        var targets = [
            {
                path: [],
                target: focusNode,
                cbdExtracted: extracted,
            },
        ];
        for (var i = 0; true; i++) {
            if (this.maxCount && i > this.maxCount)
                break;
            if (targets.length === 0)
                break;
            var newTargets = [];
            try {
                for (var targets_1 = (e_4 = void 0, __values(targets)), targets_1_1 = targets_1.next(); !targets_1_1.done; targets_1_1 = targets_1.next()) {
                    var t = targets_1_1.value;
                    if (this.filter(i, t)) {
                        out.push(t);
                    }
                    try {
                        for (var _c = (e_5 = void 0, __values(this.path.match(store, t.cbdExtracted, t.target, graphsToIgnore, inverse))), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var found = _d.value;
                            newTargets.push({
                                path: __spreadArray(__spreadArray([], __read(t.path), false), __read(found.path), false),
                                cbdExtracted: t.cbdExtracted,
                                target: found.target,
                            });
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (targets_1_1 && !targets_1_1.done && (_a = targets_1.return)) _a.call(targets_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            targets = newTargets;
        }
        return out;
    };
    return MultiPath;
}());
exports.MultiPath = MultiPath;
var OneOrMorePath = /** @class */ (function (_super) {
    __extends(OneOrMorePath, _super);
    function OneOrMorePath(path) {
        return _super.call(this, path) || this;
    }
    OneOrMorePath.prototype.filter = function (times, _res) {
        return times >= 1;
    };
    OneOrMorePath.prototype.toString = function () {
        return this.path.toString() + "+";
    };
    OneOrMorePath.prototype.found = function (cbd, inverse) {
        var newCbd = this.path.found(cbd, inverse);
        if (!newCbd)
            return;
        var next = this.path.found(newCbd, inverse);
        while (next) {
            newCbd = next;
            next = this.path.found(newCbd, inverse);
        }
        return newCbd;
    };
    return OneOrMorePath;
}(MultiPath));
exports.OneOrMorePath = OneOrMorePath;
var ZeroOrMorePath = /** @class */ (function (_super) {
    __extends(ZeroOrMorePath, _super);
    function ZeroOrMorePath(path) {
        return _super.call(this, path) || this;
    }
    ZeroOrMorePath.prototype.filter = function (_times, _res) {
        return true;
    };
    ZeroOrMorePath.prototype.toString = function () {
        return this.path.toString() + "*";
    };
    ZeroOrMorePath.prototype.found = function (cbd, inverse) {
        var next = this.path.found(cbd, inverse);
        while (next) {
            cbd = next;
            next = this.path.found(cbd, inverse);
        }
        return cbd;
    };
    return ZeroOrMorePath;
}(MultiPath));
exports.ZeroOrMorePath = ZeroOrMorePath;
var ZeroOrOnePath = /** @class */ (function (_super) {
    __extends(ZeroOrOnePath, _super);
    function ZeroOrOnePath(path) {
        return _super.call(this, path, 1) || this;
    }
    ZeroOrOnePath.prototype.filter = function (times, _res) {
        return times < 2;
    };
    ZeroOrOnePath.prototype.toString = function () {
        return this.path.toString() + "?";
    };
    ZeroOrOnePath.prototype.found = function (cbd, inverse) {
        return this.path.found(cbd, inverse) || cbd;
    };
    return ZeroOrOnePath;
}(MultiPath));
exports.ZeroOrOnePath = ZeroOrOnePath;
//# sourceMappingURL=Path.js.map
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDFMap = exports.ShapeTemplate = exports.ShapeError = exports.NodeLink = void 0;
//TODO: split this file up between Shape functionality and SHACL to our Shape class conversion steps. Also introduce a ShEx to Shape Template
var NodeLink = /** @class */ (function () {
    function NodeLink(pathPattern, link) {
        this.pathPattern = pathPattern;
        this.link = link;
    }
    return NodeLink;
}());
exports.NodeLink = NodeLink;
var ShapeError = /** @class */ (function () {
    function ShapeError(type, errors) {
        if (errors === void 0) { errors = []; }
        this.errors = [];
        this.type = type;
        this.errors = errors;
    }
    ShapeError.prototype.toString = function () {
        if (this.errors.length === 1) {
            return this.errors[0].toString();
        }
        else {
            var sep = this.type == "and" ? " && " : " || ";
            return "(" + this.errors.map(function (x) { return x.toString(); }).join(sep) + ")";
        }
    };
    return ShapeError;
}());
exports.ShapeError = ShapeError;
var ShapeTemplate = /** @class */ (function () {
    function ShapeTemplate() {
        //All properties will be added, but if a required property is not available, then we need to further look it up
        this.requiredPaths = [];
        //If thereâ€™s a nodelink through one of the properties, I want to know what other shape to look up in the shapes graph from there
        this.nodeLinks = [];
        this.atLeastOneLists = [];
        this.optionalPaths = [];
        this.closed = false; //default value
    }
    ShapeTemplate.prototype.fillPathsAndLinks = function (extraPaths, extraNodeLinks) {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = __values(this.atLeastOneLists), _d = _c.next(); !_d.done; _d = _c.next()) {
                var list = _d.value;
                try {
                    for (var list_1 = (e_2 = void 0, __values(list)), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var item = list_1_1.value;
                        extraPaths.push.apply(extraPaths, __spreadArray([], __read(item.requiredPaths), false));
                        extraPaths.push.apply(extraPaths, __spreadArray([], __read(item.optionalPaths), false));
                        // extraPaths.push(...item.nodeLinks.map((x) => x.pathPattern));
                        extraNodeLinks.push.apply(extraNodeLinks, __spreadArray([], __read(item.nodeLinks), false));
                        item.fillPathsAndLinks(extraPaths, extraNodeLinks);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_b = list_1.return)) _b.call(list_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ShapeTemplate.prototype.invalidAtLeastOneLists = function (extract) {
        var e_3, _a, e_4, _b;
        var out = new ShapeError("and");
        try {
            for (var _c = __values(this.atLeastOneLists), _d = _c.next(); !_d.done; _d = _c.next()) {
                var list = _d.value;
                var sub = new ShapeError("or");
                var atLeastOne = false;
                try {
                    for (var list_2 = (e_4 = void 0, __values(list)), list_2_1 = list_2.next(); !list_2_1.done; list_2_1 = list_2.next()) {
                        var item = list_2_1.value;
                        var error = item.requiredAreNotPresent(extract);
                        if (error) {
                            sub.errors.push(error);
                        }
                        else {
                            atLeastOne = true;
                            break;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (list_2_1 && !list_2_1.done && (_b = list_2.return)) _b.call(list_2);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (!atLeastOne) {
                    out.errors.push(sub);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (out.errors.length > 0) {
            return out;
        }
        return;
    };
    ShapeTemplate.prototype.requiredPathsAreNotPresent = function (extract) {
        var errors = this.requiredPaths.filter(function (path) { return !path.found(extract); });
        if (errors.length > 0) {
            return new ShapeError("and", errors);
        }
        else {
            return;
        }
    };
    ShapeTemplate.prototype.requiredAreNotPresent = function (extract) {
        var required = this.requiredPathsAreNotPresent(extract);
        var atLeastOne = this.invalidAtLeastOneLists(extract);
        if (required && atLeastOne) {
            return new ShapeError("and", __spreadArray(__spreadArray([], __read(required.errors), false), __read(atLeastOne.errors), false));
        }
        if (required)
            return required;
        if (atLeastOne)
            return atLeastOne;
    };
    return ShapeTemplate;
}());
exports.ShapeTemplate = ShapeTemplate;
var RDFMap = /** @class */ (function () {
    function RDFMap() {
        this.namedNodes = new Map();
        this.blankNodes = new Map();
    }
    RDFMap.prototype.set = function (node, item) {
        if (node.termType === "NamedNode") {
            this.namedNodes.set(node.value, item);
        }
        if (node.termType === "BlankNode") {
            this.blankNodes.set(node.value, item);
        }
    };
    RDFMap.prototype.get = function (node) {
        if (node.termType === "NamedNode") {
            return this.namedNodes.get(node.value);
        }
        if (node.termType === "BlankNode") {
            return this.blankNodes.get(node.value);
        }
    };
    return RDFMap;
}());
exports.RDFMap = RDFMap;
//# sourceMappingURL=Shape.js.map
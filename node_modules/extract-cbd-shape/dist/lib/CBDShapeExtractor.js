"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CbdExtracted = exports.CBDShapeExtractor = void 0;
var rdf_dereference_1 = __importDefault(require("rdf-dereference"));
var Shape_1 = require("./Shape");
var rdf_data_factory_1 = require("rdf-data-factory");
var rdf_stores_1 = require("rdf-stores");
var debug_1 = __importDefault(require("debug"));
var ShapesGraph_1 = require("./ShapesGraph");
var log = (0, debug_1.default)("extract-cbd-shape");
var df = new rdf_data_factory_1.DataFactory();
var DereferenceNeeded = /** @class */ (function () {
    function DereferenceNeeded(target, msg) {
        this.target = target;
        this.msg = msg;
    }
    return DereferenceNeeded;
}());
/**
 * Usage:
 *  import {ShapeExtractor} from "extract-cbd-shape";
 *  ...
 *  let shapeExtractor = new ShapeExtractor(shape, dereferencer);
 *  let entityquads = await shapeExtractor.extract(store, entity);
 */
var CBDShapeExtractor = /** @class */ (function () {
    function CBDShapeExtractor(shapesGraphStore, dereferencer, options) {
        if (options === void 0) { options = {}; }
        // Assign with default options
        this.options = Object.assign({ cbdDefaultGraph: false }, options);
        if (!dereferencer) {
            this.dereferencer = rdf_dereference_1.default;
        }
        else {
            this.dereferencer = dereferencer;
        }
        //Pre-process shape
        if (shapesGraphStore) {
            this.shapesGraph = new ShapesGraph_1.ShapesGraph(shapesGraphStore);
        }
    }
    CBDShapeExtractor.prototype.bulkExtract = function (store, ids, shapeId, graphsToIgnore, itemExtracted) {
        return __awaiter(this, void 0, void 0, function () {
            var out, idSet, memberSpecificQuads, ids_1, ids_1_1, id, newStore, _a, _b, quad, promises, _loop_1, this_1, ids_2, ids_2_1, id;
            var e_1, _c, e_2, _d, e_3, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        out = [];
                        idSet = new Set(ids.map(function (x) { return x.value; }));
                        memberSpecificQuads = {};
                        try {
                            for (ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                                id = ids_1_1.value;
                                memberSpecificQuads[id.value] = [];
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (ids_1_1 && !ids_1_1.done && (_c = ids_1.return)) _c.call(ids_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        newStore = rdf_stores_1.RdfStore.createDefault();
                        try {
                            for (_a = __values(store.readQuads(null, null, null, null)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                quad = _b.value;
                                if (quad.graph.termType == "NamedNode" && idSet.has(quad.graph.value)) {
                                    memberSpecificQuads[quad.graph.value].push(quad);
                                }
                                else {
                                    newStore.addQuad(quad);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        promises = [];
                        _loop_1 = function (id) {
                            var promise = this_1.extract(newStore, id, shapeId, (graphsToIgnore || []).slice()).then(function (quads) {
                                quads.push.apply(quads, __spreadArray([], __read(memberSpecificQuads[id.value]), false));
                                if (itemExtracted) {
                                    itemExtracted({ subject: id, quads: quads });
                                }
                                out.push({ subject: id, quads: quads });
                            });
                            promises.push(promise);
                        };
                        this_1 = this;
                        try {
                            for (ids_2 = __values(ids), ids_2_1 = ids_2.next(); !ids_2_1.done; ids_2_1 = ids_2.next()) {
                                id = ids_2_1.value;
                                _loop_1(id);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (ids_2_1 && !ids_2_1.done && (_e = ids_2.return)) _e.call(ids_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _f.sent();
                        return [2 /*return*/, out];
                }
            });
        });
    };
    /**
     * Extracts:
     *  * first level quads,
     *  * their blank nodes with their quads (recursively),
     *  * all quads in the namedgraph of this entity,
     *  * all quads of required paths found in the shape
     *  * the same algorithm on top of all found node links
     * @param store The RdfStore loaded with a set of initial quads
     * @param id The entity to be described/extracted
     * @param shapeId The optional SHACL NodeShape identifier
     * @param graphsToIgnore The optional parameter of graph to ignore when other entities are mentioned in the current context
     * @returns Promise of a quad array of the described entity
     */
    CBDShapeExtractor.prototype.extract = function (store, id, shapeId, graphsToIgnore) {
        return __awaiter(this, void 0, void 0, function () {
            var dontExtractFromGraph, extractInstance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dontExtractFromGraph = (graphsToIgnore ? graphsToIgnore : []).map(function (item) {
                            return item.value;
                        });
                        extractInstance = new ExtractInstance(store, this.dereferencer, dontExtractFromGraph, this.options, this.shapesGraph);
                        return [4 /*yield*/, extractInstance.extract(id, false, shapeId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CBDShapeExtractor;
}());
exports.CBDShapeExtractor = CBDShapeExtractor;
var CbdExtracted = /** @class */ (function () {
    function CbdExtracted(topology, cbdExtracted) {
        if (cbdExtracted === void 0) { cbdExtracted = new Shape_1.RDFMap(); }
        if (topology) {
            this.topology = topology;
        }
        else {
            this.topology = { forwards: {}, backwards: {} };
        }
        this.cbdExtractedMap = cbdExtracted;
    }
    CbdExtracted.prototype.addCBDTerm = function (term) {
        var t = this.cbdExtractedMap.get(term);
        if (t) {
            t.cbd = true;
        }
        else {
            this.cbdExtractedMap.set(term, { cbd: true, shape: false });
        }
    };
    CbdExtracted.prototype.addShapeTerm = function (term) {
        var t = this.cbdExtractedMap.get(term);
        if (t) {
            t.shape = true;
        }
        else {
            this.cbdExtractedMap.set(term, { cbd: true, shape: false });
        }
    };
    CbdExtracted.prototype.cbdExtracted = function (term) {
        var _a;
        return !!((_a = this.cbdExtractedMap.get(term)) === null || _a === void 0 ? void 0 : _a.shape);
    };
    CbdExtracted.prototype.push = function (term, inverse) {
        if (inverse) {
            if (!this.topology.backwards[term.value]) {
                var ne = {
                    forwards: {},
                    backwards: {},
                };
                ne.forwards[term.value] = this.topology;
                this.topology.backwards[term.value] = ne;
            }
            return new CbdExtracted(this.topology.backwards[term.value], this.cbdExtractedMap);
        }
        else {
            if (!this.topology.forwards[term.value]) {
                var ne = {
                    forwards: {},
                    backwards: {},
                };
                ne.backwards[term.value] = this.topology;
                this.topology.forwards[term.value] = ne;
            }
            return new CbdExtracted(this.topology.forwards[term.value], this.cbdExtractedMap);
        }
    };
    CbdExtracted.prototype.enter = function (term, inverse) {
        var out = inverse
            ? this.topology.backwards[term.value]
            : this.topology.forwards[term.value];
        if (out) {
            return new CbdExtracted(out, this.cbdExtractedMap);
        }
    };
    return CbdExtracted;
}());
exports.CbdExtracted = CbdExtracted;
var ExtractInstance = /** @class */ (function () {
    function ExtractInstance(store, dereferencer, graphsToIgnore, options, shapesGraph) {
        this.dereferenced = new Set();
        this.store = store;
        this.dereferencer = dereferencer;
        this.shapesGraph = shapesGraph;
        this.graphsToIgnore = graphsToIgnore;
        this.options = options;
    }
    ExtractInstance.prototype.dereference = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.dereferenced.has(url)) {
                            log("Will not dereference " + url + " again");
                            return [2 /*return*/, false];
                        }
                        this.dereferenced.add(url);
                        _a = this.loadQuadStreamInStore;
                        return [4 /*yield*/, this.dereferencer.dereference(url, {
                                fetch: this.options.fetch,
                            })];
                    case 1: return [4 /*yield*/, _a.apply(this, [(_b.sent()).data])];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ExtractInstance.prototype.extract = function (id, offline, shapeId) {
        return __awaiter(this, void 0, void 0, function () {
            var result, result_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.maybeExtractRecursively(id, new CbdExtracted(), offline, shapeId)];
                    case 1:
                        result = _a.sent();
                        result.push.apply(result, __spreadArray([], __read(this.store.getQuads(null, null, null, id)), false));
                        if (!(result.length === 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.dereference(id.value)];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.maybeExtractRecursively(id, new CbdExtracted(), offline, shapeId)];
                    case 3:
                        result_1 = _a.sent();
                        return [2 /*return*/, result_1.filter(function (value, index, array) {
                                return index === array.findIndex(function (x) { return x.equals(value); });
                            })];
                    case 4: return [2 /*return*/, result.filter(function (value, index, array) {
                            return index === array.findIndex(function (x) { return x.equals(value); });
                        })];
                }
            });
        });
    };
    ExtractInstance.prototype.maybeExtractRecursively = function (id, extracted, offline, shapeId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (extracted.cbdExtracted(id)) {
                    return [2 /*return*/, []];
                }
                extracted.addShapeTerm(id);
                return [2 /*return*/, this.extractRecursively(id, extracted, offline, shapeId)];
            });
        });
    };
    ExtractInstance.prototype.extractRecursively = function (id, extracted, offline, shapeId) {
        return __awaiter(this, void 0, void 0, function () {
            var result, shape, extraPaths, extraNodeLinks, _a, _b, path, pathQuads, _c, _d, nodeLink, matches, matches_1, matches_1_1, match, _e, _f, _g, _h, e_4_1, e_5_1, problems;
            var e_6, _j, e_5, _k, e_4, _l;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        result = [];
                        if (shapeId instanceof Shape_1.ShapeTemplate) {
                            shape = shapeId;
                        }
                        else if (shapeId && this.shapesGraph) {
                            shape = this.shapesGraph.shapes.get(shapeId);
                        }
                        if (!(shape === null || shape === void 0 ? void 0 : shape.closed)) {
                            this.CBD(id, result, extracted, this.graphsToIgnore);
                        }
                        if (!!!shape) return [3 /*break*/, 14];
                        extraPaths = [];
                        extraNodeLinks = [];
                        // Process atLeastOneLists in extraPaths and extra NodeLinks
                        shape.fillPathsAndLinks(extraPaths, extraNodeLinks);
                        try {
                            for (_a = __values(shape.requiredPaths.concat(shape.optionalPaths, extraPaths)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                path = _b.value;
                                if (!path.found(extracted) || shape.closed) {
                                    pathQuads = path
                                        .match(this.store, extracted, id, this.graphsToIgnore)
                                        .flatMap(function (pathResult) {
                                        return pathResult.path;
                                    });
                                    result.push.apply(result, __spreadArray([], __read(pathQuads), false));
                                }
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_j = _a.return)) _j.call(_a);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        _m.label = 1;
                    case 1:
                        _m.trys.push([1, 12, 13, 14]);
                        _c = __values(shape.nodeLinks.concat(extraNodeLinks)), _d = _c.next();
                        _m.label = 2;
                    case 2:
                        if (!!_d.done) return [3 /*break*/, 11];
                        nodeLink = _d.value;
                        matches = nodeLink.pathPattern.match(this.store, extracted, id, this.graphsToIgnore);
                        _m.label = 3;
                    case 3:
                        _m.trys.push([3, 8, 9, 10]);
                        matches_1 = (e_4 = void 0, __values(matches)), matches_1_1 = matches_1.next();
                        _m.label = 4;
                    case 4:
                        if (!!matches_1_1.done) return [3 /*break*/, 7];
                        match = matches_1_1.value;
                        _f = (_e = result.push).apply;
                        _g = [result];
                        _h = [[]];
                        return [4 /*yield*/, this.maybeExtractRecursively(match.target, match.cbdExtracted, offline, nodeLink.link)];
                    case 5:
                        _f.apply(_e, _g.concat([__spreadArray.apply(void 0, _h.concat([__read.apply(void 0, [(_m.sent())]), false]))]));
                        _m.label = 6;
                    case 6:
                        matches_1_1 = matches_1.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_4_1 = _m.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (matches_1_1 && !matches_1_1.done && (_l = matches_1.return)) _l.call(matches_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        _d = _c.next();
                        return [3 /*break*/, 2];
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        e_5_1 = _m.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 14];
                    case 13:
                        try {
                            if (_d && !_d.done && (_k = _c.return)) _k.call(_c);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 14:
                        if (!(!offline && id.termType === "NamedNode")) return [3 /*break*/, 16];
                        if (!shape) return [3 /*break*/, 16];
                        problems = shape.requiredAreNotPresent(extracted);
                        if (!problems) return [3 /*break*/, 16];
                        return [4 /*yield*/, this.dereference(id.value)];
                    case 15:
                        if (_m.sent()) {
                            // retry
                            return [2 /*return*/, this.extractRecursively(id, extracted, offline, shapeId)];
                        }
                        else {
                            log("".concat(id.value, " does not adhere to the shape (").concat(problems.toString(), ")"));
                        }
                        _m.label = 16;
                    case 16: return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Performs Concise Bounded Description: extract star-shape and recurses over the blank nodes
     * @param result list of quads
     * @param extractedStar topology object to keep track of already found properties
     * @param store store to use for cbd
     * @param id starting subject
     * @param graphsToIgnore
     */
    ExtractInstance.prototype.CBD = function (id, result, extractedStar, graphsToIgnore) {
        return __awaiter(this, void 0, void 0, function () {
            var graph, quads, quads_1, quads_1_1, q, next, e_7_1;
            var e_7, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        extractedStar.addCBDTerm(id);
                        graph = this.options.cbdDefaultGraph ? df.defaultGraph() : null;
                        quads = this.store.getQuads(id, null, null, graph);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        quads_1 = __values(quads), quads_1_1 = quads_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!quads_1_1.done) return [3 /*break*/, 5];
                        q = quads_1_1.value;
                        // Ignore quads in the graphs to ignore
                        if (graphsToIgnore === null || graphsToIgnore === void 0 ? void 0 : graphsToIgnore.includes(q.graph.value)) {
                            return [3 /*break*/, 4];
                        }
                        result.push(q);
                        next = extractedStar.push(q.predicate, false);
                        if (!(q.object.termType === "BlankNode" &&
                            !extractedStar.cbdExtracted(q.object))) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.CBD(q.object, result, next, graphsToIgnore)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        quads_1_1 = quads_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_7_1 = _b.sent();
                        e_7 = { error: e_7_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (quads_1_1 && !quads_1_1.done && (_a = quads_1.return)) _a.call(quads_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ExtractInstance.prototype.loadQuadStreamInStore = function (quadStream) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.store.import(quadStream).on("end", resolve).on("error", reject);
        });
    };
    return ExtractInstance;
}());
//# sourceMappingURL=CBDShapeExtractor.js.map
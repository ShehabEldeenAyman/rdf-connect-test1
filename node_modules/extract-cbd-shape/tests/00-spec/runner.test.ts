/*import { assert } from "chai";
import { NamedNode, Parser, StreamParser, Term, Writer } from "n3";
import { RdfStore } from "rdf-stores";
import each from 'jest-each';
import { CBDShapeExtractor } from "../../lib/CBDShapeExtractor";
import rdfDereference from "rdf-dereference";
import fs from 'fs';

describe("Running specification tests", async () => {
    let shapeStore = RdfStore.createDefault();
    let extractor: CBDShapeExtractor;
    let dataStore = RdfStore.createDefault();

    var files = fs.readdirSync('/assets/photos/').filter((val) => {

    });


    each(allComponentOrders).describe('with one index in %o order', indexCombinations => {

    before(async () => {
      let readStream = (
        await rdfDereference.dereference(
          "./tests/01 - fetching a shacl shape/shacl-shacl.ttl",
          { localFiles: true },
        )
      ).data;
      await new Promise((resolve, reject) => {
        shapeStore.import(readStream).on("end", resolve).on("error", reject);
      });
      extractor = new CBDShapeExtractor(shapeStore);
      let readStream2 = (
        await rdfDereference.dereference(
          "./tests/01 - fetching a shacl shape/shacl-catalog.ttl",
          { localFiles: true },
        )
      ).data;
      await new Promise((resolve, reject) => {
        dataStore.import(readStream2).on("end", resolve).on("error", reject);
      });
    });
  
    it("Extracts a SHACL shape from a shape catalog", async () => {

    });
});*/